package gharchive

import (
	"context"
	"io"
	"time"

	"cloud.google.com/go/storage"
	"google.golang.org/api/option"
)

type iface interface {
	io.Closer
	Scan(ctx context.Context) bool
	Bytes() []byte
	Err() error
}

// Scanner scans lines from gharchive
type Scanner struct {
	scanner iface
}

// Scan advances the scanner to the next token, which will then be available through
// the Bytes method. It returns false when the scan stops by reaching the end of the output.
// After Scan returns false, the Err method will return any error that occurred during scanning.
func (s *Scanner) Scan(ctx context.Context) bool {
	return s.scanner.Scan(ctx)
}

// Bytes returns the most recent token generated by a call to Scan.
// The underlying array may point to data that will be overwritten
// by a subsequent call to Scan.
func (s *Scanner) Bytes() []byte {
	return s.scanner.Bytes()
}

// Err returns the first non-EOF error that was encountered by the Scanner.
func (s *Scanner) Err() error {
	return s.scanner.Err()
}

// Close closes the scanner.
func (s *Scanner) Close() error {
	return s.scanner.Close()
}

// New returns a new Scanner
func New(ctx context.Context, startTime time.Time, opts *Options) (*Scanner, error) {
	var err error
	opts, err = opts.withDefaults(ctx)
	if err != nil {
		return nil, err
	}
	scanner := new(Scanner)
	if opts.SingleHour || opts.Concurrency == 1 || opts.PreserveOrder {
		scanner.scanner, err = newSingleScanner(ctx, startTime, opts)
	} else {
		scanner.scanner, err = newConcurrentScanner(ctx, startTime, opts)
	}
	if err != nil {
		return nil, err
	}
	return scanner, nil
}

// Validator is a function that returns true when a line passes validation
type Validator func(line []byte) bool

// Options are options for a Scanner
type Options struct {
	Validators    []Validator     // list of validators to check each line
	SingleHour    bool            // ignore end time and just scan the file containing the hour in which start occurs.
	EndTime       time.Time       // end of the timespan to scan. events up to the second before EndTime will be scanned. ignored when SingleHour is set. default: start time + 1 hour
	PreserveOrder bool            // run a single process so that the output order is preserved
	Concurrency   int             // number of concurrent downloads to run. ignored when PreserveOrder is set. default: 1
	Bucket        string          // the GCP bucket for gharchive. default: data.gharchive.org
	StorageClient *storage.Client // a client to use instead of the default.
}

func (o *Options) withDefaults(ctx context.Context) (*Options, error) {
	if o == nil {
		o = new(Options)
	}
	if o.StorageClient != nil && o.Bucket != "" {
		return o, nil
	}
	out := new(Options)
	*out = *o
	var err error
	if out.StorageClient == nil {
		out.StorageClient, err = storage.NewClient(ctx, option.WithoutAuthentication())
		if err != nil {
			return nil, err
		}
	}
	if out.Bucket == "" {
		out.Bucket = "data.gharchive.org"
	}
	if out.Concurrency == 0 {
		out.Concurrency = 1
	}
	return out, nil
}
